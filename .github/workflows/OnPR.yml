name: Run PR
run-name: Run PR by ${{github.actor}}
on:
  pull_request:
    types: [opened,reopened,edited,synchronize]
    branches: [ "main" ]
    paths:
      - '**'
  workflow_dispatch:
jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22.1'
      - name: Install node modules
        run: npm ci
      - name: Run basic jest tests
        run: npm run test:jest

  # Create-Android-Build:

  #   runs-on: ubuntu-latest
  #   needs: Test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.1'
  #     - name: Install node modules
  #       run: npm ci     
  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'
  #         cache: gradle

  #     - name: Prepare to build
  #       run: npm run prebuild:clean:silent

  #     - name: Build Android release
  #       run: npm run android:release

  #     - name: Upload to gdrive
  #       uses: adityak74/google-drive-upload-git-action@main
  #       with:
  #         credentials: ${{ secrets.G_ACCOUNT_SECRET }}
  #         filename: "./android/app/build/outputs/apk/release/app-release.apk"
  #         folderId: ${{ secrets.G_FOLDER_ID }}
  #         name: "app-release.apk" # optional string
  #         overwrite: "true" # optional boolean


  # Create-iOS-Build:
  #   runs-on: macos-latest
  #   needs: Test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.1'
  #     - name: Install node modules
  #       run: npm ci
  #     - name: Prepare 
  #       run: npm run prebuild:clean:silent
  #     - name: Prepare ios build
  #       run: npm run ios:build
  

  Test-Android-Build:
    runs-on: self-hosted
    steps:

      - run: |
          python3 -m venv virtuaP
          source virtuaP/bin/activate
          python3 -m pip install --upgrade pip
          pip install google-api-python-client

      - name: RUN Python
        env:
          SERVICE_ACCOUNT_BASE64: ${{ secrets.G_ACCOUNT_SECRET }}
        run: |
          source virtuaP/bin/activate
          echo "$SERVICE_ACCOUNT_BASE64" | base64 --decode > service_account.json

          
          python3 -c "
          import base64
          import json
          from googleapiclient.discovery import build
          from google.oauth2 import service_account
          from googleapiclient.http import MediaIoBaseDownload
          import io
          import os

          # Autenticación
          SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
          SERVICE_ACCOUNT_FILE = 'service_account.json'

          creds = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES)
          service = build('drive', 'v3', credentials=creds)
          file_name = 'app-release.apkt'

          # Buscar el archivo por nombre
          results = service.files().list(
              q=f"name = '{file_name}'",
              fields="files(id, name)"
          ).execute()

          files = results.get('files', [])

          if not files:
              print(f"No se encontró el archivo con el nombre '{file_name}'.")
          else:
              file_id = files[0]['id']  # Obtener el ID del primer archivo que coincida
              print(f"Archivo encontrado: {file_name}, ID: {file_id}")
              
              # Descargar el archivo
              request = service.files().get_media(fileId=file_id)
              fh = io.FileIO('archivo_descargado.ext', 'wb')

              downloader = MediaIoBaseDownload(fh, request)
              done = False
              while done is False:
                  status, done = downloader.next_chunk()
                  print(f'Descargando {int(status.progress() * 100)}%.')
              
              print('Archivo descargado con éxito!')
          "
          rm service_account.json
            
      - name: Install app in simulator
        run: npm run emu:install:ReleaseApp
      - name: Run Maestro
        run: npm run test:maestro

